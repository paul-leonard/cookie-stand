'use strict';

/* ***** Project Layout *****
Assumptions:
This assignment so far is only written for a single day.  I imagine we will extend this across days later.

*** Global Variables ***
  Array of hourly bucket names

*** Object Structure ***
Each store will be its own object.

  Object properties will include:
  Minimum hourly customers
  Maximum hourly customers
  Average cookies per customer
  Array of hourly customer count
  Array of hourly cookies sold count
  Total daily cookies sold

  Object methods will include:
  Generate random number of customers per hour
  Calculate hourly cookie sales
  Calculate total daily cookie sales

*** Format ***
The sales data will then be displayed in an unordered list that is generated by this JS script per the format specified at:
https://codefellows.github.io/code-201-guide/curriculum/class-06/lab/

*** Calculations within Methods ***
math.random() will be used to generate the random customer visits per hour.  I did not know much about this function, so much information was learned and used from:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random

Calculate Hourly Cookie Sales will take the random number of customers and multiply it by the given location's average cookies per customer sale rate.

Calculate Total Daily Sales by summing all hourly sales.
*/

//  *****  GLOBAL VARIABLES  *****

var hourBuckets = ['6am','7am','8am','9am','10am','11am','12pm','1pm','2pm','3pm','4pm','5pm','6pm','7pm'];


//  *****  DEFINE ALL OF THE OBJECTS  *****

var seattleObject = {
  minimumHourlyCustomers: 23,
  maximumHourlyCustomers: 65,
  averageCookiesPerCustomer: 6.3,
  hourlyCustomerCount: [],
  hourlyCookieCount: [],
  totalDailyCookieSales: 0,
  calcRandomCustomers: function() {
    //calculates a number of customers that come in for a given hour bucket and fills array
    var min = Math.ceil(this.minimumHourlyCustomers);
    var max = Math.floor(this.maximumHourlyCustomers);
    for (var k = 0; k < hourBuckets.length; k++) {
      this.hourlyCustomerCount[k] = Math.floor(Math.random() * (max - min +1)) + min;
    }
    // The above three lines will return a random integer within the specified range, inclusive of both the min and max
    // Thanks to MDN web docs for the help with it.  Info at:  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random
    return;
  },
  calcHourlyCookieSales: function() {
    for (var m = 0; m < hourBuckets.length; m++) {
      this.hourlyCookieCount[m] = Math.round(this.averageCookiesPerCustomer * this.hourlyCustomerCount[m]);
      // console.log('avg type', typeof(this.averageCookiesPerCustomer));
      // console.log('this.hourlyCookieCount[m] type', typeof(this.hourlyCookieCount[m]));
      // console.log('type of randomCustomers', typeof(this.calcRandomCustomers[m]));  <-- I called the method instead of the property... oops!
    }
    // Thanks again to MDN for help with the rounding function: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round
    return;
  },
  calcTotalDailyCount: function() {
    for (var j = 0; j < hourBuckets.length; j++) {
      this.totalDailyCookieSales += this.hourlyCookieCount[j];
    }
    return;
  },
  printSalesData: function() {
    //Print out the hourly cookie sales
    for (var i = 0; i<hourBuckets.length; i++) {
      var seattleDisplayEL = document.getElementById('SeattleSales');
      var linePrintEL = document.createElement('li');
      linePrintEL.textContent = hourBuckets[i] + ': ' + this.hourlyCookieCount[i] + ' cookies';
      seattleDisplayEL.appendChild(linePrintEL);
    }

    //Display total cookies for the location
    seattleDisplayEL = document.getElementById('SeattleSales');
    linePrintEL = document.createElement('li');
    linePrintEL.textContent = 'Total: ' + this.totalDailyCookieSales + ' cookies';
    seattleDisplayEL.appendChild(linePrintEL);
  }
};

//Thanks to Skylar for the hint to pay attention to types by adding the suffix "EL" to anything that is an HTML element.

// These method calls were here when I completed the first city (Seattle), but now they moved to a different section.
// seattleObject.calcRandomCustomers();
// seattleObject.calcHourlyCookieSales();
// seattleObject.calcTotalDailyCount();
// seattleObject.printSalesData();

// console.log('hourBuckets', hourBuckets);
// console.log('seattleObject', seattleObject);
// console.log('seattleObject.calcRandomCustomers', seattleObject.calcRandomCustomers);
// console.log('seattleObject.calcHourlyCookieSales', seattleObject.calcHourlyCookieSales);
// console.log('seattleObject.calcTotalDailyCount', seattleObject.calcTotalDailyCount);

// And then for other cities, it is the same and internal things can keep using 'this'
// I bet we will learn a way tomorrow to put all of these objects... in a higher object?
// All comments and sources removed, refer to the seattle object definition

var tokyoObject = {
  minimumHourlyCustomers: 3,
  maximumHourlyCustomers: 24,
  averageCookiesPerCustomer: 1.2,
  hourlyCustomerCount: [],
  hourlyCookieCount: [],
  totalDailyCookieSales: 0,
  calcRandomCustomers: function() {
    var min = Math.ceil(this.minimumHourlyCustomers);
    var max = Math.floor(this.maximumHourlyCustomers);
    for (var k = 0; k < hourBuckets.length; k++) {
      this.hourlyCustomerCount[k] = Math.floor(Math.random() * (max - min +1)) + min;
    }
    return;
  },
  calcHourlyCookieSales: function() {
    for (var m = 0; m < hourBuckets.length; m++) {
      this.hourlyCookieCount[m] = Math.round(this.averageCookiesPerCustomer * this.hourlyCustomerCount[m]);
    }
    return;
  },
  calcTotalDailyCount: function() {
    for (var j = 0; j < hourBuckets.length; j++) {
      this.totalDailyCookieSales += this.hourlyCookieCount[j];
    }
    return;
  },
  printSalesData: function() {
    for (var i = 0; i < hourBuckets.length; i++) {
      var tokyoDisplayEL = document.getElementById('TokyoSales');
      var linePrintEL = document.createElement('li');
      linePrintEL.textContent = hourBuckets[i] + ': ' + this.hourlyCookieCount[i] + ' cookies';
      tokyoDisplayEL.appendChild(linePrintEL);
    }
    tokyoDisplayEL = document.getElementById('TokyoSales');
    linePrintEL = document.createElement('li');
    linePrintEL.textContent = 'Total: ' + this.totalDailyCookieSales + ' cookies';
    tokyoDisplayEL.appendChild(linePrintEL);
  }
};

var dubaiObject = {
  minimumHourlyCustomers: 11,
  maximumHourlyCustomers: 38,
  averageCookiesPerCustomer: 3.7,
  hourlyCustomerCount: [],
  hourlyCookieCount: [],
  totalDailyCookieSales: 0,
  calcRandomCustomers: function() {
    for (var k = 0; k < hourBuckets.length; k++) {
      this.hourlyCustomerCount[k] = Math.floor(Math.random() * (Math.floor(this.maximumHourlyCustomers)-Math.ceil(this.minimumHourlyCustomers)+1))+Math.ceil(this.minimumHourlyCustomers);
    }
  },
  calcHourlyCookieSales: function() {
    for (var m = 0; m < hourBuckets.length; m++) {
      this.hourlyCookieCount[m] = Math.round(this.averageCookiesPerCustomer * this.hourlyCustomerCount[m]);
    }
  },
  calcTotalDailyCount: function() {
    for (var j = 0; j < hourBuckets.length; j++) {
      this.totalDailyCookieSales += this.hourlyCookieCount[j];
    }
  },
  printSalesData: function() {
    for (var i = 0; i < hourBuckets.length; i++) {
      var dubaiDisplayEL = document.getElementById('DubaiSales');
      var linePrintEL = document.createElement('li');
      linePrintEL.textContent = hourBuckets[i] + ': ' + this.hourlyCookieCount[i] + ' cookies';
      dubaiDisplayEL.appendChild(linePrintEL);
    }
    dubaiDisplayEL = document.getElementById('DubaiSales');
    linePrintEL = document.createElement('li');
    linePrintEL.textContent = 'Total: ' + this.totalDailyCookieSales + ' cookies';
    dubaiDisplayEL.appendChild(linePrintEL);
  }
};

var parisObject  = {
  minimumHourlyCustomers: 20,
  maximumHourlyCustomers: 38,
  averageCookiesPerCustomer: 2.3,
  hourlyCustomerCount: [],
  hourlyCookieCount: [],
  totalDailyCookieSales: 0,
  calcRandomCustomers: function() {
    var min = Math.ceil(this.minimumHourlyCustomers);
    var max = Math.floor(this.maximumHourlyCustomers);
    for (var k = 0; k < hourBuckets.length; k++) {
    //this.hourlyCustomerCount[k] = Math.floor(Math.random() * (max - min +1)) + min;
    //Trying out the .push function (https://www.w3schools.com/jsref/jsref_push.asp)
      this.hourlyCustomerCount.push(Math.floor(Math.random() * (max - min +1)) + min);
    }
  },
  calcHourlyCookieSales: function() {
    for (var m = 0; m < hourBuckets.length; m++) {
      this.hourlyCookieCount.push(Math.round(this.averageCookiesPerCustomer * this.hourlyCustomerCount[m]));
    }
  },
  calcTotalDailyCount: function() {
    for (var j = 0; j < hourBuckets.length; j++) {
      this.totalDailyCookieSales += this.hourlyCookieCount[j];
    }
  },
  printSalesData: function() {
    for (var i = 0; i < hourBuckets.length; i++) {
      var parisDisplayEL = document.getElementById('ParisSales');
      var linePrintEL = document.createElement('li');
      linePrintEL.textContent = hourBuckets[i] + ': ' + this.hourlyCookieCount[i] + ' cookies';
      parisDisplayEL.appendChild(linePrintEL);
    }
    parisDisplayEL = document.getElementById('ParisSales');
    linePrintEL = document.createElement('li');
    linePrintEL.textContent = 'Total: ' + this.totalDailyCookieSales + ' cookies';
    parisDisplayEL.appendChild(linePrintEL);
  }
};

var limaObject  = {
  minimumHourlyCustomers: 2,
  maximumHourlyCustomers: 16,
  averageCookiesPerCustomer: 4.6,
  hourlyCustomerCount: [],
  hourlyCookieCount: [],
  totalDailyCookieSales: 0,
  calcRandomCustomers: function() {
    var min = Math.ceil(this.minimumHourlyCustomers);
    var max = Math.floor(this.maximumHourlyCustomers);
    for (var k = 0; k < hourBuckets.length; k++) {
      this.hourlyCustomerCount.push(Math.floor(Math.random() * (max - min +1)) + min);
    }
  },
  calcHourlyCookieSales: function() {
    for (var m = 0; m < hourBuckets.length; m++) {
      this.hourlyCookieCount.push(Math.round(this.averageCookiesPerCustomer * this.hourlyCustomerCount[m]));
    }
  },
  calcTotalDailyCount: function() {
    for (var j = 0; j < hourBuckets.length; j++) {
      this.totalDailyCookieSales += this.hourlyCookieCount[j];
    }
  },
  printSalesData: function() {
    for (var i = 0; i < hourBuckets.length; i++) {
      var limaDisplayEL = document.getElementById('LimaSales');
      var linePrintEL = document.createElement('li');
      linePrintEL.textContent = hourBuckets[i] + ': ' + this.hourlyCookieCount[i] + ' cookies';
      limaDisplayEL.appendChild(linePrintEL);
    }
    limaDisplayEL = document.getElementById('LimaSales');
    linePrintEL = document.createElement('li');
    linePrintEL.textContent = 'Total: ' + this.totalDailyCookieSales + ' cookies';
    limaDisplayEL.appendChild(linePrintEL);
  },
  calculateAndRenderLocation: function() {
    this.calcRandomCustomers();
    this.calcHourlyCookieSales();
    this.calcTotalDailyCount();
    this.printSalesData();
  }
};

//  *****  METHOD CALLS  *****

seattleObject.calcRandomCustomers();
seattleObject.calcHourlyCookieSales();
seattleObject.calcTotalDailyCount();
seattleObject.printSalesData();

tokyoObject.calcRandomCustomers();
tokyoObject.calcHourlyCookieSales();
tokyoObject.calcTotalDailyCount();
tokyoObject.printSalesData();

dubaiObject.calcRandomCustomers();
dubaiObject.calcHourlyCookieSales();
dubaiObject.calcTotalDailyCount();
dubaiObject.printSalesData();

parisObject.calcRandomCustomers();
parisObject.calcHourlyCookieSales();
parisObject.calcTotalDailyCount();
parisObject.printSalesData();

limaObject.calculateAndRenderLocation();

