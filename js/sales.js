'use strict';

/* ***** Project Layout *****
Assumptions:
This assignment so far is only written for a single day.  I imagine we will extend this across days later.

*** Global Variables ***
  Array of hourly bucket names

*** Object Structure ***
Each store will be its own object.

  Object properties will include:
  Minimum hourly customers
  Maximum hourly customers
  Average cookies per customer
  Array of hourly customer count
  Array of hourly cookies sold count
  Total daily cookies sold

  Object methods will include:
  Generate random number of customers per hour
  Calculate hourly cookie sales
  Calculate total daily cookie sales

*** Format ***
The sales data will then be displayed in an unordered list that is generated by this JS script per the format specified at:
https://codefellows.github.io/code-201-guide/curriculum/class-06/lab/

*** Calculations within Methods ***
math.random() will be used to generate the random customer visits per hour.  I did not know much about this function, so much information was learned and used from:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random

Calculate Hourly Cookie Sales will take the random number of customers and multiply it by the given location's average cookies per customer sale rate.

Calculate Total Daily Sales by summing all hourly sales.
*/

//  *****  GLOBAL VARIABLES  *****
var hourBuckets = ['6am','7am','8am','9am','10am','11am','12pm','1pm','2pm','3pm','4pm','5pm','6pm','7pm'];

//  *****  DEFINE ALL OF THE OBJECTS  *****

var seattleObject = {
  minimumHourlyCustomers: 23,
  maximumHourlyCustomers: 65,
  averageCookiesPerCustomer: 6.3,
  hourlyCustomerCount: [101,2,3,4,5,6,7,8,9,10,11,12,13,14],
  hourlyCookieCount: [121,2,3,4,5,6,7,8,9,10,11,12,13,14],
  totalDailyCookieSales: 110,
  calcRandomCustomers: function(min,max) {
    //future calcs
    var customerCount = 23;
    return customerCount;
  },
  calcHourlyCookieSales: function(customers,avgCookieSalesPerCustomer) {
    //future calcs
    var cookieCount = 9;
    return cookieCount;
  },
  calcTotalDailyCount: function(ArrayOfSalesPerHour) {
    //future calcs
    var sumOfHourlySales = 1000000;
    return sumOfHourlySales;
  },
  printSalesData: function() {
    console.log('inside printSalesData');

    //Print out the hourly cookie sales
    for (var i=0; i<hourBuckets.length; i++) {
      var seattleDisplayEL = document.getElementById('SeattleSales');
      var linePrintEL = document.createElement('li');
      linePrintEL.textContent = hourBuckets[i] + ': ' + this.hourlyCookieCount[i] + ' cookies';
      seattleDisplayEL.appendChild(linePrintEL);
    }

    //Display total cookies for the location
    seattleDisplayEL = document.getElementById('SeattleSales');
    linePrintEL = document.createElement('li');
    linePrintEL.textContent = 'Total: ' + this.totalDailyCookieSales + ' cookies';
    seattleDisplayEL.appendChild(linePrintEL);

    // this.calcRandomCustomers(this.minimumHourlyCustomers,this.maximumHourlyCustomers);


      // this.calcTotalDailyCount(hourlyCookieCount);
  }
};

seattleObject.printSalesData();



console.log(hourBuckets);
console.log(seattleObject);
console.log(seattleObject.CalcRandomCustomers);
console.log(seattleObject.CalcHourlyCookieSales);
console.log(seattleObject.CalcTotalDailyCount);
